#!/usr/bin/env ruby

$:.unshift File.expand_path('../../lib', __FILE__)
require 'imap_notifier'
require 'optparse'

opts = {}

def get_pid_suffix(suffix)
  return if suffix.nil?
  return PIDFILE.sub(/\.pid/,"_#{suffix}.pid")
end

def ensure_perms file
  m =  sprintf("%o", File.stat(file).mode).split('').last(3).join().to_i
  return if m.eql? 600
  warn "#{file} permissions should be set to 600 #{m}"
  exit 1
end

def read_conf opts
  config = opts[:config] || "~/.imap_notifier"
  file = File.expand_path(config)
  return if ! File.exists? file
  ensure_perms file
  YAML.load(File.open(file)).each do |k,v|
    opts[k.to_sym] ||= v
  end
  opts[:user] ||= ENV['USER']
end

opt_parser = OptionParser.new do |opt|
  opt.banner   = "Usage: #{opt.program_name} [OPTIONS]"
  opt.program_name = "IMAP Notifier"
  opt.separator  "Options:"
  opt.on('-h', '--help', 'Display this message') do
    puts opt_parser
    exit
  end

  opt.on('-V', '--version', "Display '#{opt.program_name} #{IMAP_Notifier::VERSION}' and exit") do
    puts opt.program_name << ' ' << IMAP_Notifier::VERSION
    exit
  end

  opt.on('-v', '--debug', "Write debug output into #{DEBUGFILE}") do
    opts[:debug] = true
  end

  opt.on('-f', '--file FILE', "Read configuration file.\t[DEFAULT: ~/.imap_notifier]") do |c|
    opts[:config] = c
  end

  opt.on('-s','--server STR', "Specify imap server.\t[Default: #{IMAP_SERVER}]") do |s|
    opts[:server] = s
  end

  opt.on('-d','--domain STR',
      "Specify email domain.\t[Default: #{IMAP_SERVER.split('.').pop(2).join('.')}]") do |d|
    opts[:domain] = d.gsub(/.+\@/,'')
  end

  opt.on('-u','--user STR', "Specify user login.\t[Default: ENV['USER']]") do |u|
    opts[:user] = u
  end

  opt.on('-m','--max INT', "Group notify on N or more mails. [Default: #{MAX_MAIL}]") do |m|
    opts[:max] = m.to_i
  end

  opt.on('-k', '--kill', "Kill currently running #{opt.program_name} process with SIGINT") do
    IMAP_Notifier.kill_process
    exit
  end
end

opt_parser.parse!
read_conf opts
@pid_file = get_pid_suffix(opts[:pid_suffix]) || PIDFILE

if File.exists?(@pid_file) && IO.readlines(@pid_file).any?
  puts "#{@pid_file} already exists -- Exiting..."
  exit 0
end



IMAP_Notifier.new(opts)